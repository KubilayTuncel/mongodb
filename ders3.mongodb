
use("school");

use ("school");
db.students.insertOne({"name":"Peyami Safa",
 "age":45,
 "city":"İstanbul",
 "grade":535,
 "department":"Math",
 "books":[{"name":"Math","category":"lessson"},
          {"name":"Sefiller","category":"novel"}]})

use ("school")
db.students.insertOne({ "name":"John Steinbeck",
 "age":55,
 "city":"Bursa",
 "grade":535,
 "department":{"name":"IT","language":"tr"},
 "points":[70,90,100 ]})

use ("school");
db.students.insertMany([
 {"name":"Ahmet Ümit", "age":35, "city":"İstanbul","grade":463, "department":{"name":"IT","language":"tr"}},
 {"name":"R.Nuri Güntekin",  "age":43, "city":"Ankara",  "grade":567, "department":{"name":"Math","language":"eng"}},
 {"name":"S.Faik Abasıyanık","age":55, "city":"Antalya", "grade":409, "department":{"name":"Chemistry","language":"eng"}},
 {"name":"Yaşar Kemal",      "age":23, "city":"İstanbul","grade":390, "department":{"name":"English","language":"eng"}},
 {"name":"Halide E. Adıvar", "age":26, "city":"İzmir",   "grade":523, "department":{"name":"Math","language":"tr"}},
 {"name":"Charles Dickens", "age":35, "city":"İstanbul","grade":463, "department":{"name":"IT","language":"eng"}},
 {"name":"Nazan Bekiroğlu",  "age":49, "city":"Bursa",   "grade":387, "department":{"name":"English","language":"eng"}},
 {"name":"Sabahattin Ali",   "age":53, "city":"İzmir",   "grade":427, "department":{"name":"Physics","language":"tr"}},
 {"name":"Stephen King",   "age":53, "city":"İzmir",   "grade":523, "department":{"name":"Physics","language":"eng"}},
 {"name":"Orhan Pamuk",      "age":56, "city":"Ankara",  "grade":486, "department":{"name":"Psychology","language":"tr"}},
 {"name":"Rıfat Ilgaz" ,     "age":74, "city":"Antalya", "grade":519, "department":{"name":"IT","language":"eng"}},
 {"name":"Lev Tolstoy" ,     "age":26, "city":"Antalya", "grade":520, "department":{"name":"IT","language":"eng"}}
 ])

//------------------------------------------------------------------------------
//1)"students" collectionını yaşa(age) göre azalan şekilde sıralayınız.
//------------------------------------------------------------------------------

 use("school");
 db.students.find().sort({"age":-1})

 //------------------------------------------------------------------------------
//2)"students" collectionında yaşça en büyük ikinci kişiyi
// (name ve age) görüntüleyiniz

use("school");
db.students.find({},{"name":1,"age":1,"_id":0}).sort({"age":-1}).skip(1).limit(1)
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//3)"students" collectionında yaşça en küçük kişiyi
// (name ve age) görüntüleyiniz

use("school");
db.students.find({},{"name":1,"age":1,"_id":0}).sort({"age":1}).limit(1)
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//4)"students" collectionında program dili Türkçe olan bölümde(department) okuyan
// ve puanı(grade) 500 den
//fazla olan kişiyi/kişileri görüntüleyiniz.(name,department,grade)

use("school");
db.students.find({"department.language":"tr","grade":{$gt:500}},{"name":1,"department":1,"grade":1,"_id":0})
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//5)"students" collectionında department ı IT, Math veya Chemistry olan kişileri
//isme göre artan sıralı görüntüleyiniz.(name,department)
//------------------------------------------------------------------------------

use("school");
db.students.find({"department.name":{$in:["IT","Math","Chemistry"]}},{"name":1,"department":1,"_id":0}).sort({"name":1})

/------------------------------------------------------------------------------
//6)"students" collectionında citysi İstanbul,İzmir veya Ankara olan kişileri
//grade e göre azalan sıralı görüntüleyiniz.(name,city,grade)
//------------------------------------------------------------------------------

use("school");
db.students.find({"city":{$in:["İstanbul","İzmir","Ankara"]}},{"name":1,"city":1,"grade":1,"_id":0}).sort({"grade":-1})

/------------------------------------------------------------------------------
//7)"students" collectionında program dili eng olan bölümde(department) okuyan
//veya yaşı(age) 35 veya 35 den küçük
//olan kişiyi/kişileri görüntüleyiniz.(name,department,age)
//------------------------------------------------------------------------------

use("school");
db.students.find({$or:[{"department.language":"eng"},{"age":{$lte:35}}]},{"name":1,"department":1,"age":1,"_id":0})

/*
     AGGREGATION
1) Aggregation, dokumanlardaki verilerin islenmesi ve hesaplanan
   sonuclarin donmesini saglayan islemlerdir.
2) Aggregation islemleri, farklı dokumanlardaki degerleri gruplandirabilir.
3) Bu gruplanan veriler uzerinde cesitli islemlerin gereceklestirelerek tek
   bir sonuc degerinin donmesi saglanabilir.
4) MongoDB, 3 farklı yontem ile aggregation gerceklestirmeye izin verir.
    A) aggregation pipeline (toplama boru hattı) --> best practice...
    B) map-reduce function (map indirgeme)
    C) single-purpose aggregation (tek-amaç toplama)
5) Aggregiation, SQL'deki Join islemlerine benzetilebilir.
    AGGREGATION PIPELINE
syntax
  pipeline = [
  { $match : { … },
  { $group : { … },
  { $sort : { … },
     ...
  ]
  db.collectionName.aggregate({pipeline}, {options})
 $match() –> Verileri secerken flitrelemek icin
 $group({_id : "$field"}) - >islenen verilerin gruplanmasi icin
 $sort() -> Sonuclarin siralanmasi icin
NOT : VSCode ile yazıldığından , her komut önüne, use("DB_ismi") yazılmalı !!
*/
use('okul');
db.grades.insertMany([
{_id:6305, name: "A. MacDyver", "assignment":5, "points" :24},
{_id:6308, name: "B. Batlock", "assignment":3, "points" :22},
{_id:6312, name: "M. Tagnum", "assignment":5, "points" :30},
{_id:6319, name: "R. Stiles", "assignment":2, "points" :12},
{_id:6322, name: "A. MacDyver", "assignment":2, "points" :14},
{_id:6334, name: "R. Stiles", "assignment":1, "points" :10}
]);

//1 ) bütün assigmentlarin toplam pointlerini bulunuz
use('okul');
var pipeline = [
                {$match: {}}, //filtreleme bu taskde filtrelemeye ihtiyac yok
                {$group :{"_id" : "$assignment",total_points:{$sum:"$points"}}} //buradaki _id assagment a göre grouplama yapicagimiz icin yazdik
                                                  // bu yüzden burdaki _id ile normal id arasinda bir baglanti yok.
                                                  //yani assagment degerlerine göre gruplama yapacagimizi söylemis oluyoruz.
];
db.grades.aggregate(pipeline);

// 2 ) Her assignmentın ortalama point değerlerini bulalım

use('okul');
var pipeline = [
                  {$match : {}}, // filtreleme , bu taskde fitrelemeye ihtiyaç yok
                  {$group : {"_id" :"$assignment", avg_points :{$avg:"$points"}}}
               ];
db.grades.aggregate(pipeline);


//3 ) Her assigmentın en küçük point değerini bulalım
use('okul');
var pipeline = [
                  {$match : {}}, // filtreleme , bu taskde fitrelemeye ihtiyaç yok
                  {$group : {"_id" :"$assignment", min_points :{$min:"$points"}}}
               ];
db.grades.aggregate(pipeline);

// bu da max icin

use('okul');
var pipeline = [
                  {$match : {}}, // filtreleme , bu taskde fitrelemeye ihtiyaç yok
                  {$group : {"_id" :"$assignment", max_points :{$max:"$points"}}}
               ];
db.grades.aggregate(pipeline);


//4 ) Assigment sayısı 4 den az olan kayıtların ortalama point sayısını bulalım
use('okul');
var pipeline = [
                  {$match : {"assignment":{$lt:4}}}, 
                  {$group : {"_id" :"$assignment", avg_points :{$avg:"$points"}}}
               ];
db.grades.aggregate(pipeline);


//5 ) ismi A ile başlıyan dökümanların toplam point sayısını bulunuz
use('okul');
var pipeline = [
                  {$match : {"name":{$regex:"^A"}}}, //ismi a ile baslayan dedigi icin regex "^" kullandik
                  {$group : {"_id":null, total_points :{$sum:"$points"}}}
               ];
db.grades.aggregate(pipeline);

//6 ) ismi s ile biten dökümanalrın toplam point sayısını bulalım

use('okul');

var pipeline = [
                {$match : {"name":{$regex:"s$"}}},// regex --> kelimenin sonunda s için "$"" kullanıyoruz
                {$group : {"_id":null, total_points:{$sum:"$points"}}}
                ];
db.grades.aggregate(pipeline);

//7) points değeri 19 dan düşük olan dökümanların sayısını bulunuz
//1.yol
use('okul');

db.grades.find({"points":{$lt:19}}).count();

//2.yol
use('okul');
var pipeline = [
                {$match : {"points":{$lt:19}}},
                {$group : {"_id":null,dokumankarin_sayisi:{$count:{}}}}
                ];
db.grades.aggregate(pipeline); 

//3.yol
use('okul');
db.grades.count({"points":{$lt:19}})

//4. yol
use('okul');
var pipeline = [
                {$match : {"points":{$lt:19}}},
                {$count:"Az puanlar"}
                ];
db.grades.aggregate(pipeline); 